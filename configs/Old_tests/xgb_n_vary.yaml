paths:
  src_path: ./src/
  configs_path: ../configs/
  experiments_path: ../experiments/
  data_path: ../data/

experiment:
  name: Gold Pop Variation
  parameters:
    training_population:
      x_population: 
        distribution: gamma_univariate
        alpha: 2
        beta: 2
        size: 10000
      y_population:
        transformation: linear_univariate  # linear_univariate, random, or custom
        m: 4
        rho: 0.8
        b: 0
    gold_population:
      x_population: 
        distribution: gamma_univariate
        alpha: 2
        beta: 2
        size: 100
      y_population:
        transformation: linear_univariate  # linear_univariate, linear_mulivariate, random, or custom
        m: 4
        rho: 0.8
        b: 0
    unlabelled_population:
      x_population: 
        distribution: gamma_univariate
        alpha: 2
        beta: 2
        size: 10000
      y_population:
        include: True  # Include a true y value if we want oracle, useles right now
        transformation: linear_univariate  # linear_univariate, random, or custom
        m: 4
        rho: 0.8
        b: 0
    true_value: None  # Compute this yourself, if not available, set to None
    n_its: 200
    test_size: 0.2
    use_active_inference: False
    confidence_level: 0.95
    cut_interval: True  # If True, will cut negative, upper lower intervals to 0
  ind_var:
    name: gold_pop  # this is really confusing right now because of rho/noise, will think of solution later
    vals:
      - 5
      - 16
      - 128
      - 1024
    paths:
      - experiment.parameters.gold_population.x_population.size
  model:
    name: xgboost
    optuna: False
    optuna_trials: 10
    # parameters: Will add later
  model_bias: True  # If false, will not calculate.
  estimate: mean
  methods:
    - type: ppi
    - type: naive
    - type: classical
    - type: ppi_pp
      lhat: null  # Set None here for estimated optimal lambda
    - type: ratio
      t_dist: False
    #- type: stratified_ppi
  metrics:  # Make sure these are plural
    - widths
    - coverages 
  
plotting:
  plots:
      - type: violin
        y_metric: ci_width
        y_techniques:
          - technique: ppi
            label: PPI Widths
          - technique: classical
            label: Classic Widths
          - technique: naive
            label: Naive Widths
          - technique: ppi_pp
            label: PPI PP Widths
        title: Widths vs rho (noise)
        x_label: Method
        y_label: Widths
        file_name: widthsviolin.png
        show: False
      - type: line
        x: gold_pop
        y_metric: ci_width
        y_techniques:
          - technique: ppi
            label: PPI Widths
          - technique: classical
            label: Classic Widths
          - technique: naive
            label: Naive Widths
          - technique: ppi_pp
            label: PPI PP Widths
        title: Widths vs rho (noise)
        x_label: Gold population
        y_label: Widths
        file_name: widthsplot.png
        show: False
      - type: coverage
        x: gold_pop
        y_techniques:
          - technique: ppi
            label: PPI Widths
          - technique: classical
            label: Classic Widths
          - technique: naive
            label: Naive Widths
          - technique: ppi_pp
            label: PPI PP Widths
        title: Coverage vs Gold Pop
        x_label: Gold population
        file_name: coverageplot.png
        show: False
      - type: sample
        x: gold_pop
        y_metric: coverage
        y_techniques:
          - technique: ppi
            label: PPI Widths
          - technique: classical
            label: Classic Widths
          - technique: naive
            label: Naive Widths
          - technique: ppi_pp
            label: PPI PP Widths
        title: Coverage vs Gold Pop
        file_name: sampleplot.png
        show: False

      

reproducibility:
  seed: 42

logging:
  log_level: INFO
  log_format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
  log_file: ../logs/log.log